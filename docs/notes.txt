## Authentications 
//==============
here we sent username  and password from .env file to the server to Authenticate  user.

## Authorization
//============
here we handling permission  for each route, if a user has permission to access this route or not.

//===============================================================================
##  match: /^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]{2,7}$/, // Use a regular expression for email validation
//===============================================================================
-->  last line means : 

^ : Asserts the start of the string.
[\w-]+ : Matches one or more word characters (alphanumeric + underscore) or hyphens. This is the username part of the email.
(\.[\w-]+)* : Capturing group that matches a dot (.) followed by one or more word characters or hyphens. This group can repeat zero or more times, allowing for subdomains in the domain part of the email.
@ : Matches the at symbol, separating the username from the domain.
([\w-]+\.)+ : Capturing group that matches one or more occurrences of word characters or hyphens followed by a dot. This allows for the domain and subdomains.
[a-zA-Z]{2,7} : Matches between 2 and 7 alphabetical characters. This is the top-level domain (TLD) part of the email, ensuring it consists of 2 to 7 letters.
$ : Asserts the end of the string.
This regular expression is a basic pattern for email validation. It checks for a username, an at symbol, and a domain with an optional subdomain.
The TLD is restricted to between 2 and 7 alphabetical characters. Keep in mind that email validation using regex can be complex, and this pattern might not cover all edge cases.
Depending on your specific requirements, you might need to adjust or use a more sophisticated email validation approach.

//=============================================================================== 
## when set env  variable in terminal  use following command :
-->>  $env:vidly_jwtPrivetKey="mySecureKey"

//=============================================================================== 
kinds of status  that can be send back with json web token module are as follows :
--------------------------------------------------------------------------------
1xx Informational:
//============
100 Continue: The server has received the initial part of the request, and the client can continue with the rest.
--------------------------------------------------------------------------------
2xx Success:
//========
200 OK: The request was successful.
201 Created: The request has been fulfilled, and a new resource has been created.
204 No Content: The server successfully processed the request but there is no content to send in the response.
--------------------------------------------------------------------------------
3xx Redirection:
//===========
301 Moved Permanently: The requested resource has been permanently moved to a new location.
302 Found (or 303 See Other): The requested resource has been temporarily moved to a different location.
304 Not Modified: The client's cached copy is still valid, and there is no need to send a new request.
--------------------------------------------------------------------------------
4xx Client Error:
//==========
400 Bad Request: The server cannot process the request due to a client error (e.g., malformed request syntax).
401 Unauthorized: The client must authenticate itself to get the requested response.
403 Forbidden: The client does not have permission to access the requested resource.
404 Not Found: The server cannot find the requested resource.
--------------------------------------------------------------------------------
5xx Server Error:
//===========
500 Internal Server Error: A generic error message returned when an unexpected condition was encountered on the server.
502 Bad Gateway: The server, while acting as a gateway or proxy, received an invalid response from the upstream server.
503 Service Unavailable: The server is not ready to handle the request. Common causes are a server that is down for maintenance or is overloaded.
--------------------------------------------------------------------------------